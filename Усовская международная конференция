import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.ensemble import RandomForestRegressor
from scipy import stats
import warnings
import os
from tqdm import tqdm

# Настройки отображения
pd.set_option('display.max_columns', None)
plt.style.use('seaborn-v0_8-darkgrid')
plt.rcParams.update({
    'font.family': 'DejaVu Sans',
    'font.size': 12,
    'axes.titlesize': 14,
    'axes.labelsize': 12,
    'xtick.labelsize': 10,
    'ytick.labelsize': 10,
    'legend.fontsize': 10,
    'figure.titlesize': 16,
    'figure.facecolor': 'white'
})
warnings.filterwarnings("ignore", category=UserWarning)

def calculate_trend(df, date_col, value_col, end_date):
    """Вычисляет линию тренда и прогнозирует значение на конечную дату"""
    valid_data = df.dropna(subset=[value_col])
    if len(valid_data) < 2:
        return None, None, None, (None, None, None)
    
    # Конвертируем даты в числовой формат
    dates_num = mdates.date2num(valid_data[date_col])
    values = valid_data[value_col]
    
    # Линейная регрессия
    slope, intercept, r_value, _, _ = stats.linregress(dates_num, values)
    
    # Создаем даты для прогноза
    extended_dates = pd.date_range(start=valid_data[date_col].min(), 
                                 end=end_date, 
                                 freq='H')
    extended_num = mdates.date2num(extended_dates)
    trend_values = slope * extended_num + intercept
    
    # Прогнозируемое значение на конечную дату
    target_date_num = mdates.date2num(end_date)
    predicted_value = slope * target_date_num + intercept
    
    return extended_dates, trend_values, predicted_value, (slope, intercept, r_value)

def plot_pressure_trends(original_df, imputed_df, end_date):
    """Строит графики с линиями тренда"""
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 12), facecolor='#f5f5f5')
    fig.suptitle('Анализ давления на приеме с линиями тренда', y=0.98, fontsize=16)
    
    # Цвета и стили
    colors = {
        'original': '#1f77b4',
        'imputed': '#ff7f0e',
        'trend_orig': '#2ca02c',
        'trend_imp': '#d62728',
        'restored': '#9467bd'
    }
    
    # График исходных данных с трендом
    ax1.set_facecolor('#f9f9f9')
    ax1.plot(original_df['Дата и время'], original_df['Давление на приеме (МПа)'], 
            'o', markersize=4, alpha=0.7, color=colors['original'], 
            label='Исходные данные')
    
    # Расчет и отрисовка тренда для исходных данных
    trend_dates, trend_values, pred_orig, (slope, intercept, r2) = calculate_trend(
        original_df, 'Дата и время', 'Давление на приеме (МПа)', end_date)
    
    if trend_dates is not None and slope is not None:
        ax1.plot(trend_dates, trend_values, '--', linewidth=2, 
                color=colors['trend_orig'],
                label=f'Тренд (R²={r2**2:.2f}): y={slope:.2e}x + {intercept:.2f}')
        
        # Аннотация прогнозируемого значения
        ax1.annotate(f'Прогноз на {end_date.strftime("%d.%m.%Y %H:%M")}:\n'
                    f'{pred_orig:.3f} МПа',
                    xy=(end_date, pred_orig), xytext=(10, 10),
                    textcoords='offset points', 
                    bbox=dict(boxstyle='round', facecolor='white', alpha=0.8),
                    ha='left', va='bottom')
    
    ax1.set_title('Исходные данные давления с линией тренда', pad=12)
    ax1.set_ylabel('Давление (МПа)')
    ax1.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m.%Y"))
    ax1.grid(True, color='#dddddd', linestyle='--', linewidth=0.5)
    ax1.legend()
    
    # График импутированных данных с трендом
    ax2.set_facecolor('#f9f9f9')
    ax2.plot(imputed_df['Дата и время'], imputed_df['Давление на приеме (МПа)'], 
            'o', markersize=4, alpha=0.7, color=colors['imputed'], 
            label='Импутированные данные')
    
    # Показать восстановленные точки
    missing_mask = original_df['Давление на приеме (МПа)'].isna()
    ax2.scatter(imputed_df.loc[missing_mask, 'Дата и время'], 
               imputed_df.loc[missing_mask, 'Давление на приеме (МПа)'],
               color=colors['restored'], s=30, label='Восстановленные значения')
    
    # Расчет и отрисовка тренда для импутированных данных
    trend_dates, trend_values, pred_imp, (slope, intercept, r2) = calculate_trend(
        imputed_df, 'Дата и время', 'Давление на приеме (МПа)', end_date)
    
    if trend_dates is not None and slope is not None:
        ax2.plot(trend_dates, trend_values, '-.', linewidth=2, 
                color=colors['trend_imp'],
                label=f'Тренд (R²={r2**2:.2f}): y={slope:.2e}x + {intercept:.2f}')
        
        # Аннотация прогнозируемого значения
        ax2.annotate(f'Прогноз на {end_date.strftime("%d.%m.%Y %H:%M")}:\n'
                    f'{pred_imp:.3f} МПа',
                    xy=(end_date, pred_imp), xytext=(10, 10),
                    textcoords='offset points', 
                    bbox=dict(boxstyle='round', facecolor='white', alpha=0.8),
                    ha='left', va='bottom')
    
    ax2.set_title('Импутированные данные давления с линией тренда', pad=12)
    ax2.set_ylabel('Давление (МПа)')
    ax2.set_xlabel('Дата')
    ax2.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m.%Y"))
    ax2.grid(True, color='#dddddd', linestyle='--', linewidth=0.5)
    ax2.legend()
    
    plt.tight_layout()
    plt.show()
    
    # Вывод прогнозируемых значений
    if pred_orig is not None and pred_imp is not None:
        print("\nПрогнозируемые значения давления на приеме:")
        print(f"1. По исходным данным: {pred_orig:.4f} МПа (на {end_date})")
        print(f"2. По импутированным данным: {pred_imp:.4f} МПа (на {end_date})")
        print(f"Разница: {abs(pred_orig - pred_imp):.4f} МПа")
    else:
        print("\nНе удалось рассчитать прогноз для указанной даты")

def main():
    # 1. Проверка и загрузка данных
    file_path = "TMS_UECN_Data_March2025.xlsx"
    print(f"\n{'='*50}\nПроверка файла данных:\n{'='*50}")
    print(f"Ищем файл по пути: {os.path.abspath(file_path)}")
    
    if not os.path.exists(file_path):
        print("\nОШИБКА: Файл не найден!")
        return
    
    print("\nФайл найден. Загружаем данные...")
    try:
        df = pd.read_excel(file_path, parse_dates=['Дата и время'])
        print(f"Успешно загружено {len(df)} записей")
    except Exception as e:
        print(f"\nОШИБКА при загрузке файла: {str(e)}")
        return

    # Проверка наличия необходимых столбцов
    required_columns = ['Дата и время', 'Температура насоса (°С)', 'Давление на приеме (МПа)']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        print(f"\nОШИБКА: В файле отсутствуют следующие столбцы: {missing_columns}")
        print(f"Доступные столбцы: {df.columns.tolist()}")
        return

    # 2. Подготовка данных
    print("\nПодготовка данных...")
    df['hour'] = df['Дата и время'].dt.hour
    df['day_of_week'] = df['Дата и время'].dt.dayofweek
    df['days_since_start'] = (df['Дата и время'] - df['Дата и время'].min()).dt.days
    
    # 3. Импутация MICE
    cols_to_impute = ['Температура насоса (°С)', 'Давление на приеме (МПа)', 'hour', 'day_of_week', 'days_since_start']
    
    print("\nЗапуск импутации MICE...")
    imputer = IterativeImputer(estimator=RandomForestRegressor(n_estimators=100),
                             max_iter=15,
                             random_state=42)
    
    # Используем tqdm для отображения прогресса
    with tqdm(total=len(cols_to_impute), desc="Импутация данных") as pbar:
        df_imputed = df.copy()
        df_imputed[cols_to_impute] = imputer.fit_transform(df[cols_to_impute])
        pbar.update(len(cols_to_impute))
    
    print("Импутация завершена!")

    # 4. Оценка точности
    print("\nОценка точности...")
    test_mask = ~df['Давление на приеме (МПа)'].isna()
    test_sample = df[test_mask].sample(n=min(100, sum(test_mask)), random_state=42)
    
    temp_df = df.copy()
    temp_df.loc[test_sample.index, 'Давление на приеме (МПа)'] = np.nan
    
    test_imputed = temp_df.copy()
    test_imputed[cols_to_impute] = imputer.fit_transform(temp_df[cols_to_impute])
    
    y_true = test_sample['Давление на приеме (МПа)']
    y_pred = test_imputed.loc[test_sample.index, 'Давление на приеме (МПа)']
    
    absolute_errors = np.abs(y_true - y_pred)
    relative_errors = absolute_errors / y_true
    
    ε_abs = np.mean(absolute_errors)
    ε_rel = np.mean(relative_errors)
    
    print(f"Средняя абсолютная ошибка: {ε_abs:.4f} МПа")
    print(f"Средняя относительная ошибка: {ε_rel*100:.2f}%")

    # 5. Визуализация результатов
    print("\nПостроение графиков...")
    
    # Основные графики в одном окне
    fig = plt.figure(figsize=(18, 12), facecolor='#f5f5f5')
    date_format = mdates.DateFormatter("%d.%m")
    fig.suptitle('Анализ данных ТМС УЭЦН до и после импутации', y=0.99, fontsize=16, fontweight='bold')
    
    # Цветовая схема
    original_color = '#1f77b4'
    imputed_color = '#ff7f0e'
    restored_color = '#d62728'
    grid_color = '#dddddd'
    
    # Давление на приеме
    ax1 = plt.subplot(2, 2, 1, facecolor='#f9f9f9')
    ax1.plot(df['Дата и время'], df['Давление на приеме (МПа)'], 'o', 
             markersize=3, alpha=0.7, color=original_color, label='Исходные данные')
    ax1.set_title('Давление на приеме (до импутации)', pad=12, fontweight='bold')
    ax1.set_ylabel('Давление, МПа', fontsize=12)
    ax1.set_xlabel('Дата и время', fontsize=12)
    ax1.xaxis.set_major_formatter(date_format)
    ax1.grid(True, color=grid_color, linestyle='--', linewidth=0.5)
    ax1.legend()
    
    ax2 = plt.subplot(2, 2, 2, facecolor='#f9f9f9')
    ax2.plot(df_imputed['Дата и время'], df_imputed['Давление на приеме (МПа)'], 'o', 
             markersize=3, alpha=0.7, color=imputed_color, label='Импутированные данные')
    ax2.scatter(df_imputed[df['Давление на приеме (МПа)'].isna()]['Дата и время'], 
               df_imputed[df['Давление на приеме (МПа)'].isna()]['Давление на приеме (МПа)'],
               color=restored_color, s=20, label='Восстановленные значения')
    ax2.set_title('Давление на приеме (после импутации)', pad=12, fontweight='bold')
    ax2.set_ylabel('Давление, МПа', fontsize=12)
    ax2.set_xlabel('Дата и время', fontsize=12)
    ax2.xaxis.set_major_formatter(date_format)
    ax2.grid(True, color=grid_color, linestyle='--', linewidth=0.5)
    ax2.legend()
    
    # Температура насоса
    ax3 = plt.subplot(2, 2, 3, facecolor='#f9f9f9')
    ax3.plot(df['Дата и время'], df['Температура насоса (°С)'], 'o', 
             markersize=3, alpha=0.7, color=original_color)
    ax3.set_title('Температура насоса (до импутации)', pad=12, fontweight='bold')
    ax3.set_ylabel('Температура, °C', fontsize=12)
    ax3.set_xlabel('Дата и время', fontsize=12)
    ax3.xaxis.set_major_formatter(date_format)
    ax3.grid(True, color=grid_color, linestyle='--', linewidth=0.5)
    
    ax4 = plt.subplot(2, 2, 4, facecolor='#f9f9f9')
    ax4.plot(df_imputed['Дата и время'], df_imputed['Температура насоса (°С)'], 'o', 
             markersize=3, alpha=0.7, color=imputed_color)
    ax4.scatter(df_imputed[df['Температура насоса (°С)'].isna()]['Дата и время'], 
               df_imputed[df['Температура насоса (°С)'].isna()]['Температура насоса (°С)'],
               color=restored_color, s=20)
    ax4.set_title('Температура насоса (после импутации)', pad=12, fontweight='bold')
    ax4.set_ylabel('Температура, °C', fontsize=12)
    ax4.set_xlabel('Дата и время', fontsize=12)
    ax4.xaxis.set_major_formatter(date_format)
    ax4.grid(True, color=grid_color, linestyle='--', linewidth=0.5)
    
    plt.tight_layout(pad=3.0)
    plt.subplots_adjust(top=0.94)
    plt.show()
    
    # Графики точности
    fig2, (ax7, ax8) = plt.subplots(1, 2, figsize=(16, 6), facecolor='#f5f5f5')
    fig2.suptitle('Оценка точности импутации', fontsize=16, fontweight='bold', y=1.02)
    
    # Гистограмма ошибок
    ax7.set_facecolor('#f9f9f9')
    n, bins, patches = ax7.hist(np.abs(y_true - y_pred), bins=20, 
                               color='#4e79a7', edgecolor='white', alpha=0.8)
    ax7.set_title('Распределение абсолютных ошибок', pad=12, fontweight='bold')
    ax7.set_xlabel('Ошибка, МПа', fontsize=12)
    ax7.set_ylabel('Частота', fontsize=12)
    ax7.grid(True, color='#dddddd', linestyle='--', linewidth=0.5)
    
    # Добавим аннотацию с метриками
    ax7.annotate(f'Средняя ошибка: {ε_abs:.4f} МПа\nОтносительная ошибка: {ε_rel*100:.2f}%',
                xy=(0.95, 0.95), xycoords='axes fraction',
                ha='right', va='top', bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
    
    # Сравнение значений
    ax8.set_facecolor('#f9f9f9')
    ax8.scatter(y_true, y_pred, alpha=0.7, color='#59a14f', edgecolor='white', s=80)
    ax8.plot([min(y_true), max(y_true)], [min(y_true), max(y_true)], 
            'r--', linewidth=2.5)
    ax8.set_title('Сравнение истинных и предсказанных значений', pad=12, fontweight='bold')
    ax8.set_xlabel('Истинные значения, МПа', fontsize=12)
    ax8.set_ylabel('Предсказанные значения, МПа', fontsize=12)
    ax8.grid(True, color='#dddddd', linestyle='--', linewidth=0.5)
    
    plt.tight_layout(pad=3.0)
    plt.show()
    
    # График сравнения фактических и восстановленных значений (в атм)
    plt.figure(figsize=(12, 8), facecolor='#f5f5f5')
    plt.gca().set_facecolor('#f9f9f9')
    
    # Конвертация МПа в атм (1 МПа ≈ 9.86923 атм)
    y_true_atm = y_true * 9.86923
    y_pred_atm = y_pred * 9.86923
    
    plt.plot(y_true_atm, y_pred_atm, 'o', markersize=10, alpha=0.7, 
             color='#17becf', markeredgecolor='white', label='Предсказанные значения')
    plt.plot([min(y_true_atm), max(y_true_atm)], [min(y_true_atm), max(y_true_atm)], 
             'r--', linewidth=2.5, label='Идеальная точность')
    
    plt.title('Сравнение фактических и восстановленных значений\nдавления на приёме насоса', 
              pad=20, fontsize=16, fontweight='bold')
    plt.xlabel('Истинное давление, атм', fontsize=12)
    plt.ylabel('Предсказанное давление, атм', fontsize=12)
    
    # Настройка осей
    max_val = max(max(y_true_atm), max(y_pred_atm))
    plt.yticks(np.arange(0, max_val+20, 20), fontsize=11)
    plt.xticks(np.arange(0, max_val+20, 20), fontsize=11)
    plt.grid(True, linestyle='--', alpha=0.5, color='#dddddd')
    
    # Метрики точности (переведенные в атм)
    ε_abs_atm = ε_abs * 9.86923
    plt.legend(title=f'Метрики точности:\nε_абс = {ε_abs_atm:.1f} атм\nε_отн = {ε_rel*100:.1f}%',
              fontsize=11, title_fontsize=11, framealpha=0.9)
    
    plt.tight_layout()
    plt.show()
    
    # График аномальных значений давления (в атм)
    plt.figure(figsize=(14, 7), facecolor='#f5f5f5')
    ax = plt.gca()
    ax.set_facecolor('#f9f9f9')
    
    pressure_atm = df_imputed['Давление на приеме (МПа)'] * 9.86923
    mean_pressure = pressure_atm.mean()
    std_pressure = pressure_atm.std()
    anomaly_threshold = mean_pressure + 2 * std_pressure
    
    plt.plot(df_imputed['Дата и время'], pressure_atm, 
             'o', markersize=6, alpha=0.6, color='#7f7f7f', 
             markeredgecolor='white', label='Нормальные значения')
    
    anomalies = pressure_atm[pressure_atm > anomaly_threshold]
    if not anomalies.empty:
        plt.scatter(anomalies.index, anomalies, 
                   color='#e377c2', s=120, zorder=5, edgecolor='white',
                   label=f'Аномалии (> {anomaly_threshold:.0f} атм)')
    
    plt.axhline(mean_pressure, color='#2ca02c', linestyle='--', linewidth=2, 
               label=f'Среднее: {mean_pressure:.0f} атм')
    plt.axhline(anomaly_threshold, color='#ff7f0e', linestyle=':', linewidth=2,
               label=f'Порог аномалий: {anomaly_threshold:.0f} атм')
    
    plt.title('Аномальные значения давления на приёме насоса', 
              pad=15, fontsize=16, fontweight='bold')
    plt.xlabel('Дата и время', fontsize=12)
    plt.ylabel('Давление, атм', fontsize=12)
    
    max_pressure = max(pressure_atm)
    plt.yticks(np.arange(0, max_pressure+20, 20), fontsize=11)
    
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
    plt.xticks(rotation=45, fontsize=11)
    
    plt.legend(fontsize=11, framealpha=0.9)
    plt.grid(True, alpha=0.3, linestyle='--', color='#dddddd')
    plt.tight_layout()
    plt.show()
    
    # Графики с линиями тренда
    end_date = pd.to_datetime('2025-05-01 15:35:00')
    plot_pressure_trends(df, df_imputed, end_date)
    
    # Сохранение результатов на рабочем столе
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    output_path = os.path.join(desktop_path, "TMS_UECN_Data_Imputed.xlsx")
    df_imputed.to_excel(output_path, index=False)
    print(f"\nРезультаты сохранены в файл: {output_path}")

if __name__ == "__main__":
    main()
    input("\nНажмите Enter для выхода...")
